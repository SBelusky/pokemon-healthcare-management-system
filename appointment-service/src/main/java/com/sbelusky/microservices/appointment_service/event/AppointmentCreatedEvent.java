/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sbelusky.microservices.appointment_service.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AppointmentCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -433554766007155697L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AppointmentCreatedEvent\",\"namespace\":\"com.sbelusky.microservices.appointment_service.event\",\"fields\":[{\"name\":\"ownerId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"ownerEmail\",\"type\":\"string\"},{\"name\":\"pokemonName\",\"type\":\"string\"},{\"name\":\"appointmentDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AppointmentCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AppointmentCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AppointmentCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AppointmentCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AppointmentCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AppointmentCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AppointmentCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AppointmentCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AppointmentCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long ownerId;
  private java.lang.CharSequence ownerEmail;
  private java.lang.CharSequence pokemonName;
  private java.lang.CharSequence appointmentDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AppointmentCreatedEvent() {}

  /**
   * All-args constructor.
   * @param ownerId The new value for ownerId
   * @param ownerEmail The new value for ownerEmail
   * @param pokemonName The new value for pokemonName
   * @param appointmentDate The new value for appointmentDate
   */
  public AppointmentCreatedEvent(java.lang.Long ownerId, java.lang.CharSequence ownerEmail, java.lang.CharSequence pokemonName, java.lang.CharSequence appointmentDate) {
    this.ownerId = ownerId;
    this.ownerEmail = ownerEmail;
    this.pokemonName = pokemonName;
    this.appointmentDate = appointmentDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ownerId;
    case 1: return ownerEmail;
    case 2: return pokemonName;
    case 3: return appointmentDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ownerId = (java.lang.Long)value$; break;
    case 1: ownerEmail = (java.lang.CharSequence)value$; break;
    case 2: pokemonName = (java.lang.CharSequence)value$; break;
    case 3: appointmentDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ownerId' field.
   * @return The value of the 'ownerId' field.
   */
  public java.lang.Long getOwnerId() {
    return ownerId;
  }


  /**
   * Sets the value of the 'ownerId' field.
   * @param value the value to set.
   */
  public void setOwnerId(java.lang.Long value) {
    this.ownerId = value;
  }

  /**
   * Gets the value of the 'ownerEmail' field.
   * @return The value of the 'ownerEmail' field.
   */
  public java.lang.CharSequence getOwnerEmail() {
    return ownerEmail;
  }


  /**
   * Sets the value of the 'ownerEmail' field.
   * @param value the value to set.
   */
  public void setOwnerEmail(java.lang.CharSequence value) {
    this.ownerEmail = value;
  }

  /**
   * Gets the value of the 'pokemonName' field.
   * @return The value of the 'pokemonName' field.
   */
  public java.lang.CharSequence getPokemonName() {
    return pokemonName;
  }


  /**
   * Sets the value of the 'pokemonName' field.
   * @param value the value to set.
   */
  public void setPokemonName(java.lang.CharSequence value) {
    this.pokemonName = value;
  }

  /**
   * Gets the value of the 'appointmentDate' field.
   * @return The value of the 'appointmentDate' field.
   */
  public java.lang.CharSequence getAppointmentDate() {
    return appointmentDate;
  }


  /**
   * Sets the value of the 'appointmentDate' field.
   * @param value the value to set.
   */
  public void setAppointmentDate(java.lang.CharSequence value) {
    this.appointmentDate = value;
  }

  /**
   * Creates a new AppointmentCreatedEvent RecordBuilder.
   * @return A new AppointmentCreatedEvent RecordBuilder
   */
  public static com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder newBuilder() {
    return new com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder();
  }

  /**
   * Creates a new AppointmentCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AppointmentCreatedEvent RecordBuilder
   */
  public static com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder newBuilder(com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder other) {
    if (other == null) {
      return new com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder();
    } else {
      return new com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new AppointmentCreatedEvent RecordBuilder by copying an existing AppointmentCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new AppointmentCreatedEvent RecordBuilder
   */
  public static com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder newBuilder(com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent other) {
    if (other == null) {
      return new com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder();
    } else {
      return new com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AppointmentCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AppointmentCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<AppointmentCreatedEvent> {

    private java.lang.Long ownerId;
    private java.lang.CharSequence ownerEmail;
    private java.lang.CharSequence pokemonName;
    private java.lang.CharSequence appointmentDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[0].schema(), other.ownerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ownerEmail)) {
        this.ownerEmail = data().deepCopy(fields()[1].schema(), other.ownerEmail);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pokemonName)) {
        this.pokemonName = data().deepCopy(fields()[2].schema(), other.pokemonName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.appointmentDate)) {
        this.appointmentDate = data().deepCopy(fields()[3].schema(), other.appointmentDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AppointmentCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[0].schema(), other.ownerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ownerEmail)) {
        this.ownerEmail = data().deepCopy(fields()[1].schema(), other.ownerEmail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pokemonName)) {
        this.pokemonName = data().deepCopy(fields()[2].schema(), other.pokemonName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.appointmentDate)) {
        this.appointmentDate = data().deepCopy(fields()[3].schema(), other.appointmentDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ownerId' field.
      * @return The value.
      */
    public java.lang.Long getOwnerId() {
      return ownerId;
    }


    /**
      * Sets the value of the 'ownerId' field.
      * @param value The value of 'ownerId'.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder setOwnerId(java.lang.Long value) {
      validate(fields()[0], value);
      this.ownerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ownerId' field has been set.
      * @return True if the 'ownerId' field has been set, false otherwise.
      */
    public boolean hasOwnerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ownerId' field.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder clearOwnerId() {
      ownerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownerEmail' field.
      * @return The value.
      */
    public java.lang.CharSequence getOwnerEmail() {
      return ownerEmail;
    }


    /**
      * Sets the value of the 'ownerEmail' field.
      * @param value The value of 'ownerEmail'.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder setOwnerEmail(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ownerEmail = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ownerEmail' field has been set.
      * @return True if the 'ownerEmail' field has been set, false otherwise.
      */
    public boolean hasOwnerEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ownerEmail' field.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder clearOwnerEmail() {
      ownerEmail = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pokemonName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPokemonName() {
      return pokemonName;
    }


    /**
      * Sets the value of the 'pokemonName' field.
      * @param value The value of 'pokemonName'.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder setPokemonName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.pokemonName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pokemonName' field has been set.
      * @return True if the 'pokemonName' field has been set, false otherwise.
      */
    public boolean hasPokemonName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pokemonName' field.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder clearPokemonName() {
      pokemonName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'appointmentDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppointmentDate() {
      return appointmentDate;
    }


    /**
      * Sets the value of the 'appointmentDate' field.
      * @param value The value of 'appointmentDate'.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder setAppointmentDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.appointmentDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'appointmentDate' field has been set.
      * @return True if the 'appointmentDate' field has been set, false otherwise.
      */
    public boolean hasAppointmentDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'appointmentDate' field.
      * @return This builder.
      */
    public com.sbelusky.microservices.appointment_service.event.AppointmentCreatedEvent.Builder clearAppointmentDate() {
      appointmentDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AppointmentCreatedEvent build() {
      try {
        AppointmentCreatedEvent record = new AppointmentCreatedEvent();
        record.ownerId = fieldSetFlags()[0] ? this.ownerId : (java.lang.Long) defaultValue(fields()[0]);
        record.ownerEmail = fieldSetFlags()[1] ? this.ownerEmail : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.pokemonName = fieldSetFlags()[2] ? this.pokemonName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.appointmentDate = fieldSetFlags()[3] ? this.appointmentDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AppointmentCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AppointmentCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AppointmentCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<AppointmentCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.ownerId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.ownerId);
    }

    out.writeString(this.ownerEmail);

    out.writeString(this.pokemonName);

    out.writeString(this.appointmentDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.ownerId = null;
      } else {
        this.ownerId = in.readLong();
      }

      this.ownerEmail = in.readString(this.ownerEmail instanceof Utf8 ? (Utf8)this.ownerEmail : null);

      this.pokemonName = in.readString(this.pokemonName instanceof Utf8 ? (Utf8)this.pokemonName : null);

      this.appointmentDate = in.readString(this.appointmentDate instanceof Utf8 ? (Utf8)this.appointmentDate : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ownerId = null;
          } else {
            this.ownerId = in.readLong();
          }
          break;

        case 1:
          this.ownerEmail = in.readString(this.ownerEmail instanceof Utf8 ? (Utf8)this.ownerEmail : null);
          break;

        case 2:
          this.pokemonName = in.readString(this.pokemonName instanceof Utf8 ? (Utf8)this.pokemonName : null);
          break;

        case 3:
          this.appointmentDate = in.readString(this.appointmentDate instanceof Utf8 ? (Utf8)this.appointmentDate : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










